sum(x31_nova==y)==nrow(matriz_x)
matriz_x_nova = matriz_x[,-31]
boxplot(matriz_x_nova)
det(cor(matriz_x_nova))
round(eigen(cor(matriz_x_nova))$values/sum(eigen(cor(matriz_x_nova))$values), 4)*100
p = vector()
for(i in 1:ncol(matriz_x_nova)){
p[i] = shapiro.test(matriz_x_nova[,i])$p
}
round(p, 3)
dados_novo_sem31 = cbind(y, matriz_x_nova)
dados_novo_sem31
View(dados_novo_sem31)
#Verificando normalidade das variaveis
p = vector()
for(i in 1:ncol(matriz_x_nova)){
p[i] = shapiro.test(matriz_x_nova[,i])$p
}
round(p, 3)
which(p<0.05)
round(p, 3)
which(p<0.05)
which(p<0.05)
cor(dados_novo_sem31[,1], dados_novo_sem31[,-1])
round(p, 3)
which(p<0.05)
cor(dados_novo_sem31[,c(9, 14, 17, 18, 24, 50)])
which(p<0.05)
c(8 13 16 17 23 49)
which(p<0.05)
dados
dados_novo_sem31
estimado = c(0, 0, 1,1, 1, 1, 0, 0)
length(estimado)
lengthreal)
length(REAL)
length(real)
real = c(1, 1, 1, 1, 1, 0, 0, 0)
estimado = c(0, 0, 1,1, 1, 1, 0, 0)
length(real)
real = c(1, 1, 1, 1, 1, 0, 0, 0)
estimado = c(0, 0, 1, 1, 1, 1, 0, 0)
length(real)
calcula(metricas_classificacao(real, estimado))
calcula_metricas_classificacao(real, estimado))
calcula_metricas_classificacao(real, estimado)
calcula_metricas_classificacao = function(vetor_real, vetor_estimado){
matriz_confusao = matrix(0, nrow = 2, ncol = 2)
return(matriz_confusao)
}
real = c(1, 1, 1, 1, 1, 0, 0, 0)
estimado = c(0, 0, 1, 1, 1, 1, 0, 0)
calcula_metricas_classificacao(real, estimado)
calcula_metricas_classificacao = function(vetor_real, vetor_estimado){
matriz_confusao = matrix(0, nrow = 2, ncol = 2)
matriz_confusao[1,1] = intersect(vetor_real==1, vetor_estimado==1)
return(matriz_confusao)
}
real = c(1, 1, 1, 1, 1, 0, 0, 0)
estimado = c(0, 0, 1, 1, 1, 1, 0, 0)
calcula_metricas_classificacao(real, estimado)
calcula_metricas_classificacao = function(vetor_real, vetor_estimado){
matriz_confusao = matrix(0, nrow = 2, ncol = 2)
matriz_confusao[1,1] = length(intersect(vetor_real==1, vetor_estimado==1))
return(matriz_confusao)
}
real = c(1, 1, 1, 1, 1, 0, 0, 0)
estimado = c(0, 0, 1, 1, 1, 1, 0, 0)
calcula_metricas_classificacao(real, estimado)
length(intersect(vetor_real==1, vetor_estimado==1))
length(intersect(real==1, estimado==1))
intersect(real==1, estimado==1)
intersect(which(real==1), which(estimado==1))
calcula_metricas_classificacao = function(vetor_real, vetor_estimado){
matriz_confusao = matrix(0, nrow = 2, ncol = 2)
matriz_confusao[1,1] = length(intersect(which(vetor_real==1), which(vetor_estimado==1)))
return(matriz_confusao)
}
real =     c(1, 1, 1, 1, 1, 0, 0, 0)
estimado = c(0, 0, 1, 1, 1, 1, 0, 0)
calcula_metricas_classificacao(real, estimado)
calcula_metricas_classificacao = function(vetor_real, vetor_estimado){
matriz_confusao = matrix(0, nrow = 2, ncol = 2)
matriz_confusao[1,1] = length(intersect(which(vetor_real==1), which(vetor_estimado==1)))
matriz_confusao[1,1] = length(intersect(which(vetor_real==2), which(vetor_estimado==2)))
return(matriz_confusao)
}
real =     c(1, 1, 1, 1, 1, 0, 0, 0)
estimado = c(0, 0, 1, 1, 1, 1, 0, 0)
calcula_metricas_classificacao(real, estimado)
calcula_metricas_classificacao = function(vetor_real, vetor_estimado){
matriz_confusao = matrix(0, nrow = 2, ncol = 2)
matriz_confusao[1,1] = length(intersect(which(vetor_real==1), which(vetor_estimado==1)))
matriz_confusao[2,2] = length(intersect(which(vetor_real==0), which(vetor_estimado==0)))
return(matriz_confusao)
}
real =     c(1, 1, 1, 1, 1, 0, 0, 0)
estimado = c(0, 0, 1, 1, 1, 1, 0, 0)
calcula_metricas_classificacao(real, estimado)
type(c(1, 2, 3))
typeof(c(1, 2, 3))
class(c(1, 2, 3))
class(vetor_real || vetor_estimado)
class(c(3, 4) || c(12, 2))
calcula_metricas_classificacao = function(vetor_real, vetor_estimado){
if(class(vetor_real) || class(vetor_estimado) != "factor"){return("Vectors must be factor class")}
matriz_confusao = matrix(0, nrow = 2, ncol = 2)
matriz_confusao[1,1] = length(intersect(which(vetor_real==1), which(vetor_estimado==1)))
matriz_confusao[2,2] = length(intersect(which(vetor_real==0), which(vetor_estimado==0)))
return(matriz_confusao)
}
real =     c(1, 1, 1, 1, 1, 0, 0, 0)
estimado = c(0, 0, 1, 1, 1, 1, 0, 0)
calcula_metricas_classificacao(real, estimado)
estimado = c(0, 0, 1, 1, 1, 1, 0, 0)
calcula_metricas_classificacao(real, estimado)
calcula_metricas_classificacao = function(vetor_real, vetor_estimado){
if(!is.factor(vetor_real) | !is.factor(vetor_estimado)){return("Vectors must be factor class")}
matriz_confusao = matrix(0, nrow = 2, ncol = 2)
matriz_confusao[1,1] = length(intersect(which(vetor_real==1), which(vetor_estimado==1)))
matriz_confusao[2,2] = length(intersect(which(vetor_real==0), which(vetor_estimado==0)))
return(matriz_confusao)
}
real =     c(1, 1, 1, 1, 1, 0, 0, 0)
estimado = c(0, 0, 1, 1, 1, 1, 0, 0)
calcula_metricas_classificacao(real, estimado)
calcula_metricas_classificacao = function(vetor_real, vetor_estimado){
if(!is.factor(vetor_real) | !is.factor(vetor_estimado)){return("Vectors must be factor class")}
if(length(vetor_real)!=length(vetor_estimado)){return("Vectors must have same length/size")}
matriz_confusao = matrix(0, nrow = 2, ncol = 2)
matriz_confusao[1,1] = length(intersect(which(vetor_real==1), which(vetor_estimado==1)))
matriz_confusao[2,2] = length(intersect(which(vetor_real==0), which(vetor_estimado==0)))
return(matriz_confusao)
}
real =     c(1, 1, 1, 1, 1, 0, 0, 0)
estimado = c(0, 0, 1, 1, 1, 1, 0, 0)
calcula_metricas_classificacao(real, estimado)
real =     c(1, 1, 1, 1, 1, 0, 0, 0, 1)
estimado = c(0, 0, 1, 1, 1, 1, 0, 0)
calcula_metricas_classificacao(real, estimado)
real = c(1, 1, 1, 1, 1, 0, 0, 0, 1)
estimado = c(0, 0, 1, 1, 1, 1, 0, 0)
calcula_metricas_classificacao(real, estimado)
real = as.factor(c(1, 1, 1, 1, 1, 0, 0, 0, 1))
estimado = as.factor(c(0, 0, 1, 1, 1, 1, 0, 0))
calcula_metricas_classificacao(real, estimado)
calcula_metricas_classificacao = function(vetor_real, vetor_estimado){
if(!is.factor(vetor_real) | !is.factor(vetor_estimado)){return("Vectors must be factor class")}
if(length(vetor_real)!=length(vetor_estimado)){
return(paste0("Vectors must have same length/size"), length(vetor_real), "!=", length(vetor_estimado))}
matriz_confusao = matrix(0, nrow = 2, ncol = 2)
matriz_confusao[1,1] = length(intersect(which(vetor_real==1), which(vetor_estimado==1)))
matriz_confusao[2,2] = length(intersect(which(vetor_real==0), which(vetor_estimado==0)))
return(matriz_confusao)
}
real = as.factor(c(1, 1, 1, 1, 1, 0, 0, 0, 1))
estimado = as.factor(c(0, 0, 1, 1, 1, 1, 0, 0))
calcula_metricas_classificacao(real, estimado)
real = as.factor(c(1, 1, 1, 1, 1, 0, 0, 0, 1))
estimado = as.factor(c(0, 0, 1, 1, 1, 1, 0, 0))
calcula_metricas_classificacao(real, estimado)
calcula_metricas_classificacao = function(vetor_real, vetor_estimado){
if(!is.factor(vetor_real) | !is.factor(vetor_estimado)){return("Vectors must be factor class")}
if(length(vetor_real)!=length(vetor_estimado)){
return(paste0("Vectors must have same length/size", length(vetor_real), "!=", length(vetor_estimado)))}
matriz_confusao = matrix(0, nrow = 2, ncol = 2)
matriz_confusao[1,1] = length(intersect(which(vetor_real==1), which(vetor_estimado==1)))
matriz_confusao[2,2] = length(intersect(which(vetor_real==0), which(vetor_estimado==0)))
return(matriz_confusao)
}
real = as.factor(c(1, 1, 1, 1, 1, 0, 0, 0, 1))
estimado = as.factor(c(0, 0, 1, 1, 1, 1, 0, 0))
calcula_metricas_classificacao(real, estimado)
calcula_metricas_classificacao = function(vetor_real, vetor_estimado){
if(!is.factor(vetor_real) | !is.factor(vetor_estimado)){return("Vectors must be factor class")}
if(length(vetor_real)!=length(vetor_estimado)){
return(paste0("Vectors must have same length/size, ", length(vetor_real), "!=", length(vetor_estimado)))}
matriz_confusao = matrix(0, nrow = 2, ncol = 2)
matriz_confusao[1,1] = length(intersect(which(vetor_real==1), which(vetor_estimado==1)))
matriz_confusao[2,2] = length(intersect(which(vetor_real==0), which(vetor_estimado==0)))
return(matriz_confusao)
}
real = as.factor(c(1, 1, 1, 1, 1, 0, 0, 0, 1))
estimado = as.factor(c(0, 0, 1, 1, 1, 1, 0, 0))
calcula_metricas_classificacao(real, estimado)
estimado = as.factor(c(0, 0, 1, 1, 1, 1, 0, 0, 0))
calcula_metricas_classificacao(real, estimado)
calcula_metricas_classificacao = function(vetor_real, vetor_estimado){
if(!is.factor(vetor_real) | !is.factor(vetor_estimado)){return("Vectors must be factor class")}
if(length(vetor_real)!=length(vetor_estimado)){
return(paste0("Vectors must have same length/size, ", length(vetor_real), "!=", length(vetor_estimado)))}
matriz_confusao = matrix(0, nrow = 2, ncol = 2)
matriz_confusao[1,1] = length(intersect(which(vetor_real==1), which(vetor_estimado==1)))
matriz_confusao[2,2] = length(intersect(which(vetor_real==0), which(vetor_estimado==0)))
return(matriz_confusao)
}
real = as.factor(c(1, 1, 1, 1, 1, 0, 0, 0, 1))
estimado = as.factor(c(0, 0, 1, 1, 1, 1, 0, 0, 0))
calcula_metricas_classificacao(real, estimado)
calcula_metricas_classificacao = function(vetor_real, vetor_estimado){
if(!is.factor(vetor_real) | !is.factor(vetor_estimado)){return("Vectors must be factor class")}
if(length(vetor_real)!=length(vetor_estimado)){
return(paste0("Vectors must have same length/size, ", length(vetor_real), "!=", length(vetor_estimado)))}
matriz_confusao = matrix(0, nrow = 2, ncol = 2)
matriz_confusao[1,1] = length(intersect(which(vetor_real==1), which(vetor_estimado==1)))
matriz_confusao[2,2] = length(intersect(which(vetor_real==0), which(vetor_estimado==0)))
return(matriz_confusao)
}
real = as.factor(c(1, 1, 1, 1, 1, 0, 0, 0, 1))
estimado = as.factor(c(0, 0, 1, 1, 1, 1, 0, 0, 0))
calcula_metricas_classificacao(real, estimado)
table(real)
table(real)/sum(table(real))
real = as.factor(c(1, 1, 1, 1, 1, 0, 0, 0, 1))
estimado = as.factor(c(0, 0, 1, 1, 1, 1, 0, 0, 0))
calcula_metricas_classificacao(real, estimado)
calcula_metricas_classificacao(real, estimado)
names(calcula_metricas_classificacao(real, estimado))
names(calcula_metricas_classificacao(real, estimado)) = 1
calcula_metricas_classificacao(real, estimado)
real = as.factor(c(1, 1, 1, 1, 1, 0, 0, 0, 1))
estimado = as.factor(c(0, 0, 1, 1, 1, 1, 0, 0, 0))
calcula_metricas_classificacao(real, estimado)
matriz_confusao[1,2]
calcula_metricas_classificacao = function(vetor_real, vetor_estimado){
if(!is.factor(vetor_real) | !is.factor(vetor_estimado)){return("Vectors must be factor class")}
if(length(vetor_real)!=length(vetor_estimado)){
return(paste0("Vectors must have same length/size, ", length(vetor_real), "!=", length(vetor_estimado)))}
matriz_confusao = matrix(0, nrow = 2, ncol = 2)
matriz_confusao[1,1] = length(intersect(which(vetor_real==1), which(vetor_estimado==1)))
matriz_confusao[2,2] = length(intersect(which(vetor_real==0), which(vetor_estimado==0)))
matriz_confusao[1,2] = length(intersect(which(vetor_real==0), which(vetor_estimado==1)))
matriz_confusao[2,1] = length(intersect(which(vetor_real==1), which(vetor_estimado==0)))
return(matriz_confusao)
}
real = as.factor(c(1, 1, 1, 1, 1, 0, 0, 0, 1))
estimado = as.factor(c(0, 0, 1, 1, 1, 1, 0, 0, 0))
calcula_metricas_classificacao(real, estimado)
real = as.factor(c(1, 1, 1, 1, 1, 0, 0, 0, 1, 1))
estimado = as.factor(c(0, 0, 1, 1, 1, 1, 0, 0, 0, 1))
calcula_metricas_classificacao(real, estimado)
calcula_metricas_classificacao = function(vetor_real, vetor_estimado){
if(!is.factor(vetor_real) | !is.factor(vetor_estimado)){return("Vectors must be factor class")}
if(length(vetor_real)!=length(vetor_estimado)){
return(paste0("Vectors must have same length/size, ", length(vetor_real), "!=", length(vetor_estimado)))}
matriz_confusao = matrix(0, nrow = 2, ncol = 2)
matriz_confusao[1,1] = length(intersect(which(vetor_real==1), which(vetor_estimado==1)))
matriz_confusao[2,2] = length(intersect(which(vetor_real==0), which(vetor_estimado==0)))
matriz_confusao[1,2] = length(intersect(which(vetor_real==0), which(vetor_estimado==1)))
matriz_confusao[2,1] = length(intersect(which(vetor_real==1), which(vetor_estimado==0)))
colnames(matriz_confusao) = c("1", "0")
return(matriz_confusao)
}
real = as.factor(c(1, 1, 1, 1, 1, 0, 0, 0, 1, 1))
estimado = as.factor(c(0, 0, 1, 1, 1, 1, 0, 0, 0, 1))
calcula_metricas_classificacao(real, estimado)
calcula_metricas_classificacao = function(vetor_real, vetor_estimado){
if(!is.factor(vetor_real) | !is.factor(vetor_estimado)){return("Vectors must be factor class")}
if(length(vetor_real)!=length(vetor_estimado)){
return(paste0("Vectors must have same length/size, ", length(vetor_real), "!=", length(vetor_estimado)))}
matriz_confusao = matrix(0, nrow = 2, ncol = 2)
matriz_confusao[1,1] = length(intersect(which(vetor_real==1), which(vetor_estimado==1)))
matriz_confusao[2,2] = length(intersect(which(vetor_real==0), which(vetor_estimado==0)))
matriz_confusao[1,2] = length(intersect(which(vetor_real==0), which(vetor_estimado==1)))
matriz_confusao[2,1] = length(intersect(which(vetor_real==1), which(vetor_estimado==0)))
colnames(matriz_confusao) = c("1", "0")
rownames(matriz_confusao) = c("1", "0")
return(matriz_confusao)
}
real = as.factor(c(1, 1, 1, 1, 1, 0, 0, 0, 1, 1))
estimado = as.factor(c(0, 0, 1, 1, 1, 1, 0, 0, 0, 1))
calcula_metricas_classificacao(real, estimado)
real = as.factor(c(1, 1, 1, 1, 1, 0, 0, 0, 1, 1))
estimado = as.factor(c(0, 0, 1, 1, 1, 1, 0, 0, 0, 1))
calcula_metricas_classificacao(real, estimado)
a = calcula_metricas_classificacao(real, estimado)
colnames(a) = 1
calcula_metricas_classificacao = function(vetor_real, vetor_estimado){
if(!is.factor(vetor_real) | !is.factor(vetor_estimado)){return("Vectors must be factor class")}
if(length(vetor_real)!=length(vetor_estimado)){
return(paste0("Vectors must have same length/size, ", length(vetor_real), "!=", length(vetor_estimado)))}
matriz_confusao = matrix(0, nrow = 2, ncol = 2)
matriz_confusao[1,1] = length(intersect(which(vetor_real==1), which(vetor_estimado==1)))
matriz_confusao[2,2] = length(intersect(which(vetor_real==0), which(vetor_estimado==0)))
matriz_confusao[1,2] = length(intersect(which(vetor_real==0), which(vetor_estimado==1)))
matriz_confusao[2,1] = length(intersect(which(vetor_real==1), which(vetor_estimado==0)))
colnames(matriz_confusao) = c("Real1", "Real0")
rownames(matriz_confusao) = c("Pred1", "Pred0")
return(matriz_confusao)
}
real = as.factor(c(1, 1, 1, 1, 1, 0, 0, 0, 1, 1))
estimado = as.factor(c(0, 0, 1, 1, 1, 1, 0, 0, 0, 1))
a = calcula_metricas_classificacao(real, estimado)
a
# Carregar pacotes
library(e1071)
library(caret)
confusionMatrix(real, estimado)
?confusionMatrix()
confusionMatrix(actual, predicted, cutoff = 0.5)
confusionMatrix(real, estimado, cutoff = 0.5)
confusionMatrix(real, estimado, cutoff = 0.5)
confusionMatrix(real, estimado)
calcula_metricas_classificacao(real, estimado)
real = as.factor(c(1, 1, 1, 1, 1, 0, 0, 0, 1, 1))
estimado = as.factor(c(0, 0, 1, 1, 1, 1, 0, 0, 0, 1))
calcula_metricas_classificacao = function(vetor_real, vetor_estimado){
if(!is.factor(vetor_real) | !is.factor(vetor_estimado)){return("Vectors must be factor class")}
if(length(vetor_real)!=length(vetor_estimado)){
return(paste0("Vectors must have same length/size, ", length(vetor_real), "!=", length(vetor_estimado)))}
matriz_confusao = matrix(0, nrow = 2, ncol = 2)
matriz_confusao[1,1] = length(intersect(which(vetor_real==1), which(vetor_estimado==1)))
matriz_confusao[2,2] = length(intersect(which(vetor_real==0), which(vetor_estimado==0)))
matriz_confusao[1,2] = length(intersect(which(vetor_real==0), which(vetor_estimado==1)))
matriz_confusao[2,1] = length(intersect(which(vetor_real==1), which(vetor_estimado==0)))
colnames(matriz_confusao) = c("Real1", "Real0")
rownames(matriz_confusao) = c("Pred1", "Pred0")
return(matriz_confusao)
}
real = as.factor(c(1, 1, 1, 1, 1, 0, 0, 0, 1, 1))
estimado = as.factor(c(0, 0, 1, 1, 1, 1, 0, 0, 0, 1))
calcula_metricas_classificacao(real, estimado)
p = mean(real)
p
p = mean(as.numeric(real))
p
mean(real)
corrplot(cor(dados_novo_sem_31),
method = "color",
col = colorRampPalette(c("red", "white", "seagreen3"))(200),
type = "upper",
tl.col = "black",
tl.srt = 45,
addCoef.col = "black",
number.cex = 0.7,
diag = FALSE)
library(corrplot)
corrplot(cor(dados_novo_sem_31),
method = "color",
col = colorRampPalette(c("red", "white", "seagreen3"))(200),
type = "upper",
tl.col = "black",
tl.srt = 45,
addCoef.col = "black",
number.cex = 0.7,
diag = FALSE)
corrplot(cor(dados_novo_sem31),
method = "color",
col = colorRampPalette(c("red", "white", "seagreen3"))(200),
type = "upper",
tl.col = "black",
tl.srt = 45,
addCoef.col = "black",
number.cex = 0.7,
diag = FALSE)
cor(dados_novo_sem31)
dados_novo_sem31
corrplot(cor(dados_novo_sem31[´,-1]),
corrplot(cor(dados_novo_sem31[,-1]),
method = "color",
col = colorRampPalette(c("red", "white", "seagreen3"))(200),
type = "upper",
tl.col = "black",
tl.srt = 45,
addCoef.col = "black",
number.cex = 0.7,
diag = FALSE)
?corrplot
# Criar uma matriz de exemplo
set.seed(123)
matriz <- matrix(rnorm(100), nrow = 10)
# Heatmap básico
heatmap(matriz,
Rowv = NA, Colv = NA,  # Desativa dendrogramas
col = heat.colors(100), # Paleta de cores
scale = "none",         # Não padronizar linhas/colunas
main = "Heatmap Básico")
# Instalar (se necessário) e carregar o pacote
install.packages("pheatmap")
library(pheatmap)
# Exemplo com dados aleatórios
pheatmap(matriz,
color = colorRampPalette(c("blue", "white", "red"))(100),
cluster_rows = TRUE,  # Agrupar linhas
cluster_cols = TRUE,  # Agrupar colunas
show_rownames = TRUE,
show_colnames = TRUE,
main = "Heatmap com pheatmap")
#Selecao de variaveis pra verificar se aquelas 3 sao selecionadas.
# Definir grade de alpha e lambda para validação cruzada
ctrl <- trainControl(
method = "cv",        # Validação cruzada k-fold
number = 5,           # 5 folds
classProbs = TRUE,    # Necessário para regressão logística
summaryFunction = twoClassSummary  # Métricas para classificação
)
# Treinar o modelo Elastic Net
model_elastic <- train(
x = X_train,
y = y_train,
method = "glmnet",
family = "binomial",   # Para regressão logística
trControl = ctrl,
tuneGrid = expand.grid(
alpha = seq(0, 1, by = 0.1),  # Testa diferentes alphas (0 = Ridge, 1 = Lasso)
lambda = 10^seq(-3, 0, length = 20)  # Testa diferentes lambdas
),
metric = "ROC"        # Otimiza pela AUC-ROC
)
divide_treino_teste_valida_estratificado <- function(vetor_y, estrat_pesos = c(60, 30, 10)) {
# Verifica se os pesos somam 100%
if (sum(estrat_pesos) != 100) {
stop("A soma dos pesos deve ser 100%.")
}
# Converte os pesos em proporções (0-1)
prop_treino <- estrat_pesos[1] / 100
prop_teste <- estrat_pesos[2] / 100
prop_valida <- estrat_pesos[3] / 100
# Cria um dataframe para armazenar índices e classes
dados <- data.frame(
indice = 1:length(vetor_y),
classe = vetor_y
)
# Divide os dados estratificados por classe
library(caret)  # Para createDataPartition()
# Primeiro divide em TREINO vs (TESTE + VALIDAÇÃO)
indices_treino <- createDataPartition(
dados$classe,
p = prop_treino,
list = FALSE
)
# Dados restantes (TESTE + VALIDAÇÃO)
dados_restantes <- dados[-indices_treino, ]
# Agora divide TESTE vs VALIDAÇÃO (ajustando a proporção)
prop_teste_ajustado <- prop_teste / (prop_teste + prop_valida)
indices_teste_valida <- createDataPartition(
dados_restantes$classe,
p = prop_teste_ajustado,
list = FALSE
)
# Separa TESTE e VALIDAÇÃO
indices_teste <- dados_restantes$indice[indices_teste_valida]
indices_valida <- dados_restantes$indice[-indices_teste_valida]
# Retorna os índices
return(list(
treino = indices_treino,
teste = indices_teste,
valida = indices_valida
))
}
# Exemplo de uso:
y <- factor(rep(c("A", "B", "C"), each = 100))  # Dados estratificados
divisao <- divide_treino_teste_valida_estratificado(y, c(60, 20, 20))
# Verificando a distribuição das classes em cada conjunto
table(y[divisao$treino])  # Treino (60%)
table(y[divisao$teste])   # Teste (20%)
table(y[divisao$valida])  # Validação (20%)
divide_treino_teste_valida_estratificado(y, c(60, 30, 10))
sample(indices_total)
sample(seq(1:10))
sample(which(vetor_y==1))
sample(which(vetor_y==1))
sample(which(vetor_y==1))
sample(which(y==1))
sample(which(real==1))
sample(which(vetor_y==0))
sample(which(y==0))
sample(which(real==0))
sample(which(real==))
sample(which(real==1))
sample(1:10)
sample(1:10)
sample(1:10)
sample(1:10)
sample(1:10)
sample(1:10)
str(dados)
View(dados)
matriz_x = dados[,-c(1, ncol(dados))]
names(matriz_x) = paste0("X", seq(1:length(names(matriz_x))))
dados_novo = cbind("y" = as.factor(dados$class), matriz_x)
View(dados_novo)
#Analise Descritiva
boxplot(dados_novo)
dados$feat_31
table(dados$feat_31)
table(dados$y)
table(dados_novo$y)
#Variavel 31 indica vazamento de dados
table(matriz_x$X31)
x31_nova = matrix(0, nrow = nrow(matriz_x), ncol = 1)
x31_nova[which(matriz_x[,31]!=0),] = 1
x31_nova
sum(x31_nova==y)==nrow(matriz_x)
matriz_x_nova = matriz_x[,-31]
boxplot(matriz_x_nova)
det(cor(matriz_x_nova))
round(eigen(cor(matriz_x_nova))$values/sum(eigen(cor(matriz_x_nova))$values), 4)*100
dados_novo_sem31 = cbind(y, matriz_x_nova)
#Verificando normalidade das variaveis
p = vector()
for(i in 1:ncol(matriz_x_nova)){
p[i] = shapiro.test(matriz_x_nova[,i])$p
}
round(p, 3)
hist(dados_novo_sem31$X3)
boxplot(dados)
which(p<0.05)
DADOS
dados
View(dados_novo_sem31)
which(p<0.05)
